// Arrow goes through things, look into raycasting for hitting (search for "DontGoThroughThings")
// Can roll while charging (lol)

using UnityEngine;

class Bow : RangedWeapon
{
    /* 
        Inherited attributes:
          Sprite itemSprite  - Sprite of the weapon in the inventory
          Sprite itemName    - String used for item in inventory

          float swingTimer   - Time between attacks / Attack speed
          int damage         - Base damage the weapon does
          float knockback      - The amound of knockback the weapon does
          GameObject attack  - Prefab GameObject generated by the weapon

          int maxAmmo        - Number of shots that can loaded at once
          int minAmmo        - Number of ammo need to even shoot
          int curAmmo        - Number of ammo that the weapon currently has
          int reloadAmmo     - Number of ammo reloaded every timer
          float reloadTime   - Amount of time it takes to reload one reloadAmmo
          float speed        - Speed of the projectile
    */

    // Timer used to count how long the bow is held
    private float chargeTimer;
    // Scale of speed gained / second
    private float speedScale = 11f;
    // Flag for slow set
    private bool slowed = false;
    // Amount of slow
    private float slowSpeed = 0.5f;
    // Base damage
    private int damageScale = 2;
    // Amount of time for splits
    private float chargeTime = 0.25f;
    // Bonus damage
    private int bonDam;

    public Bow(Transform hero) : base(hero)
    {

        chargeTimer = 0;

        // Bow swing timer: long (
        swingTime = chargeTime * 2;
        // Bow base damage: low - high
        damage = 0;
        // Bow bonus damage (BOWnus damage teehee)
        bonDam = 0;
        // Bow knockback
        // Lance knockback
        knockback = 5f;
        // Load up the attack object
        attack = Resources.Load("Prefabs/Arrow") as GameObject;
        // Bow sprite
        //sprite = Resources.Load("Sprites/Bow") as Sprite;

        maxAmmo = 0; // + stats.BonusMaxAmmo
        minAmmo = 0;
        curAmmo = 0; // Bow has infinite ammo

        reloadAmmo = 0;
        reloadTime = 0;

        // Arrow speed variable on charge
        speed = 0;

        name = "Bow";
    }

    public override void OnMouseDown(Transform hero)
    {
        if (!slowed)
        {
            slowed = true;
            stats.SpeedMultiplier -= slowSpeed;
        }

        // Start counting the time
        // IF the time is less than 3 seconds
        if (chargeTimer < 2)
        {
            chargeTimer += Time.deltaTime;
        }

        base.OnMouseDown(hero);
    }

    public override void OnMouseUp(Transform hero)
    {
        // Modify the charge timer with the swing timer multiplier (specifically for bows to make them shoot faster/slower with swing timers)
        float modChargeTime = chargeTime * stats.BonusSwingTimeMultiplier;

        // IF the bow was charged long enough
        if (chargeTimer >= chargeTime)
        {
            // Charged to first tier
            if (chargeTimer < modChargeTime * 2)
            {
                bonDam = damageScale;
            }
            // Charged to second tier
            else if (chargeTimer < modChargeTime * 3)
            {
                bonDam = damageScale + 1;
            }
            // Charged to third tier
            else if (chargeTimer >= modChargeTime * 3)
            {
                bonDam = damageScale + 2;
            }

            // Set the speed the speed
            speed = speedScale * bonDam;
        }
        else
        {
            // Shoot a crappy arrow
            // Crappy arrows ALWAYS do 1 damage
            bonDam = -1 * (stats.Damage - 1);
            // Crappy arrows move SLOW
            speed = speedScale * 0.5f;

            //Debug.Log("Didn't charge long enough!");
        }

        // Add the extra damage
        stats.BonusDamage += bonDam;

        // Shoot the arrow
        base.OnMouseUp(hero);

        ResetValues();
    }

    private void ResetValues()
    {
        // Reset the values
        // Remove the extra damage
        stats.BonusDamage -= bonDam;
        // Remove the speed
        speed = 0;
        // Reset the timer
        chargeTimer = 0;
        // Reset the slow
        slowed = false;
        stats.SpeedMultiplier += slowSpeed;
    }
}
